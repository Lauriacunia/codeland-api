import mongoose from "mongoose";
import { connectMongoDB } from "./../config/configMongoDB.js";

connectMongoDB();

import { ProjectService } from "../services/project.service.js";
const projectService = new ProjectService();

const createPorjects = async () => {
  try {
    const projectData = [
      {
        name: "Joy",
        description:
          "This is a RESTful API built with Node.js designed to be consumed by an e-commerce website that specializes in offering a variety of experiences as gifts. These experiences span across travel, gastronomy, relaxation, and more. Users can access the purchasing options, filter results based on preferences, or search for a specific experience by name or keywords.",
        images: null,
        technologies: [
          "Node Js",
          "express",
          "mongoose",
          "cookie-parser",
          "bcrypt",
          "cors",
          "dotenv",
        ],
        demo: null,
        documentation: null,
        design: null,
        repository: "https://github.com/Lauriacunia/joy-api",
        tags: [
          "api",
          "rest",
          "cookies",
          "authentication and authorization",
          "login",
          "logout",
          "sessions",
          "bcrypt",
          "router",
          "mvc",
          "crud",
          "mongodb",
          "error handler",
          "status code",
          "json",
          "postman",
          "logs",
          "documentation",
        ],
        created_at: "2024-01-5 11:33:00",
      },
      {
        name: "ShopFun",
        description:
          "Explore my cutting-edge SPA crafted with Angular 17, showcasing its newest functionalities. This dynamic e-commerce platform allows you to effortlessly browse through a curated list of products, delve into the specifics of each item, and seamlessly add products to your cart. Stay informed about your shopping journey by effortlessly tracking the total purchase amount. Welcome to a smooth and intuitive online shopping experience!",
        images: null,
        technologies: [
          "Angular 17",
          "Tailwind CSS",
          "Fakestore API",
          "date-fns",
        ],
        demo: "https://shop-fun-9ebc3.web.app/",
        documentation: null,
        design: null,
        repository: "https://github.com/Lauriacunia/shopfun",
        tags: [
          "typescript",
          "signal",
          "computed",
          "effects",
          "string interpolation",
          "property binding",
          "event binding",
          "spread operator",
          "@if",
          "@for",
          "@switch",
          "ReactiveForms",
          "dynamic styles",
          "life cycling",
          "Input",
          "Output",
          "Http request",
          "pop drilling",
          "services",
          "pipes",
          "directives",
          "dependency injection",
          "routerLink",
          "routerOutlet",
        ],
        created_at: "2024-01-15 15:33:57",
      },
      {
        name: "TaskHub",
        description:
          "TaskHub is an application designed for task management. With this application, you can create, edit, and delete tasks seamlessly. Enjoy the convenience of local storage persistence. Dive into the project to explore the latest features of Angular 17, including a revamped syntax for cycles and conditionals. Uncover the power of Signal, Effect, and Computed functionalities that enhance the overall efficiency and user experience.",
        images: [],
        technologies: ["Angular 17", "Tailwind CSS"],
        demo: "https://mydayapp-ddea0.web.app/",
        documentation: "",
        design: "",
        repository: "https://github.com/Lauriacunia/todo-list-angular17",
        tags: [
          "typescript",
          "signal",
          "computed",
          "effects",
          "string interpolation",
          "property binding",
          "event binding",
          "spread operator",
          "@if",
          "@for",
          "dynamic styles",
          "life cycling",
          "Input",
          "Output",
          "pipes",
          "directives",
        ],
        created_at: "2024-01-10 10:33:57",
      },
      {
        name: "OMS - SPA",
        description:
          "OMS is a Single Page Application (SPA) about the Epidemiological Situation of Coronavirus. Developed using React 17 and Material UI. It includes forms, charts, animations, and routing.",
        images: [],
        technologies: ["React Js 17", "Material UI"],
        demo: "https://oms-challenge-laura.netlify.app/",
        documentation: "",
        design: "",
        repository: "https://github.com/Lauriacunia/OMS_website",
        tags: [
          "axios",
          "chart.js",
          "react",
          "react-chartjs-2",
          "react-html-table-to-excel",
          "react-lottie",
          "Yup",
        ],
        created_at: "2024-01-15 15:33:57",
      },
      {
        name: "ecommerce-springboot",
        description:
          "REST API for ecommerce consumption built with Spring Boot 3.2.2, Java 17, and PostgreSQL. It allows for creating and listing products, listing all products by a specific category, or searching for a product by ID. It also provides the functionality to view a customer's purchase history or the total number of registered purchases.",
        images: [
          "https://github.com/Lauriacunia/ecommerce-springboot/assets/63796774/673f690f-4599-4766-b1f4-add4e2f9abb3",
          "https://github.com/Lauriacunia/ecommerce-springboot/assets/63796774/69116314-097a-4ae2-acbf-4b4636b7ac19",
          "https://github.com/Lauriacunia/ecommerce-springboot/assets/63796774/717fc125-bec8-4702-b6c5-b108bf248e67",
        ],
        technologies: ["Springboot 3.2.2", "Java 17", "Postgresql"],
        demo: "",
        documentation:
          "https://documenter.getpostman.com/view/13362314/2sA2r3YkNK",
        design: "-",
        repository: "https://github.com/Lauriacunia/ecommerce-springboot",
        tags: [
          "postgresql",
          "gradle",
          "spring initializr",
          "@SpringbootAplication",
          "@Entity",
          "@Controller",
          "@Service",
          "@Repository",
          "application.properties dev & pnd",
          "Domain-driven layer architecture",
          "JPA",
          "Anotaciones @Table @Column @Id @EmbebededId",
          "OneToMany",
          "ManyToOne",
          "ManyToMany",
          "Spring Data",
          "QueryMethods",
          "Dependency injection",
          "Inversion of Control",
          "Deployment",
          "Build .jar",
        ],
        created_at: "2024-02-11 10:33:50",
      },
      {
        name: "Pilcha - UX/UI",
        description:
          "Pilcha is a UX/UI development project for a mobile application of a circular fashion store focused on the reuse of used garments. It includes Desk research, Benchmarking, User, POV, MVP, Wireframes, Design Patterns, UI guidelines, UI kit, Icon app design, Moodboard, Interviews, Motion, and Prototype.",
        images: [],
        technologies: [
          "Desk research",
          "Benchmarking",
          "User",
          "POV",
          "MVP",
          "Wireframes",
          "Design Patterns",
          "UI guidelines",
          "UI kit",
          "Icon app design",
          "Interviews",
          "Moodboard",
          "Motion",
          "Prototype",
        ],
        demo: "https://www.figma.com/proto/MUNVUVBGUuKoaikUwbNlWi/Wireframes-v3---app-Pilcha---Laura-Acu%C3%B1a-30-9?type=design&node-id=636-2921&t=a2hSKtSGhFuKqxhA-1&scaling=scale-down&page-id=614%3A2834&starting-point-node-id=636%3A2920&mode=design",
        documentation: "",
        design:
          "https://www.behance.net/gallery/187684545/Digital-Product-Prototype-Pilcha-Ecommerce",
        repository: "",
        tags: [
          "Desk research",
          "Benchmarking",
          "User",
          "POV",
          "MVP",
          "Wireframes",
          "Design Patterns",
          "UI guidelines",
          "UI kit",
          "Icon app design",
          "Interviews",
          "Moodboard",
          "Motion",
          "Prototype",
        ],
        created_at: "2023-12-10 10:33:50",
      },
      {
        name: "COTO - UX/UI Redesign",
        description:
          "COTO Digital is an e-commerce platform of the COTO supermarket chain in Argentina. This project involves a redesign of the website, taking into consideration the pain points identified. It includes Desk Research, Benchmarks, User Persona, POV, MVP, Wireframes, Design Patterns, UI Guidelines, UI Kit, Icon Design, Heuristic Evaluation, Surveys and Results Analysis, Journey Map, Lean UX Canvas, FDV Matrix, Tree Testing, Task Flow, UX Writing, Brand Voice, Layout, Motion, and Prototype.",
        images: [],
        technologies: [
          "Desk Research",
          "Benchmarks",
          "User Persona",
          "POV",
          "MVP",
          "Wireframes",
          "Design Patterns",
          "UI Guidelines",
          "UI Kit",
          "Icon Design",
          "Heuristic Evaluation",
          "Surveys and Results Analysis",
          "Journey Map",
          "Lean UX Canvas",
          "FDV Matrix",
          "Tree Testing",
          "Task Flow",
          "UX Writing",
          "Brand Voice",
          "Layout",
          "Motion",
          "Prototype",
        ],
        demo: "https://www.figma.com/proto/TeXVAR68IcbFY4sNfdDmA1/Redesign-COTO---Laura-Acu%C3%B1a?type=design&node-id=347-6464&t=4y4pXqh8TzC7oBpA-1&scaling=min-zoom&page-id=0%3A1&starting-point-node-id=347%3A6464&mode=design",
        documentation: "",
        design:
          "https://www.behance.net/gallery/190471233/Redesign-of-Digital-Web-Produc",
        repository: "",
        tags: [
          "Desk Research",
          "Benchmarks",
          "User Persona",
          "POV",
          "MVP",
          "Wireframes",
          "Design Patterns",
          "UI Guidelines",
          "UI Kit",
          "Icon Design",
          "Heuristic Evaluation",
          "Surveys and Results Analysis",
          "Journey Map",
          "Lean UX Canvas",
          "FDV Matrix",
          "Tree Testing",
          "Task Flow",
          "UX Writing",
          "Brand Voice",
          "Layout",
          "Motion",
          "Prototype",
        ],
        created_at: "2024-01-15 10:33:50",
      },
    ];

    await projectService.create(projectData);
    console.log("Loaded projects successfully!");
  } catch (error) {
    console.error("Error: ", error);
  } finally {
    mongoose.disconnect();
  }
};

createPorjects();
